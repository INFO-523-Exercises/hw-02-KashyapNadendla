---
title: "hw-02-01-Transforming like a Data...Transformer"
format:
  html:
    theme: default
    author: "Kashyap Sai Prasad Nadendla"
---

## SETUP

```{r setup, message=FALSE}

# Sets the number of significant figures to two - e.g., 0.01
options(digits = 2)

# Required package for quick package downloading and loading 
if (!require(pacman))  
  install.packages("pacman")

# Downloads and load required packages
pacman::p_load(dlookr, # Exploratory data analysis
               forecast, # Needed for Box-Cox transformations
               formattable, # HTML tables from R outputs
               here, # Standardizes paths to data
               kableExtra, # Alternative to formattable
               knitr, # Needed to write HTML reports
               missRanger, # To generate NAs
               tidyverse,
               tidytuesdayR,showtextdb) # Powerful data wrangling package suite
```

```{r premierLeague-dataset, message=FALSE, warning = FALSE}

tuesdata <- tidytuesdayR::tt_load('2023-04-04')
tuesdata <- tidytuesdayR::tt_load(2023, week = 14)
```

## Load and Examine the data

I have selected the Premier League match day data. It contains data of every team and their matches in the 2021-2022 season. The data includes teams playing, date, referee, and stats for home and away side such as shots, fouls, cards, halftime and full time result and more.

```{r view-dataset}

soccer <- tuesdata$soccer
```

```{r formattable}

soccer |>
  head() |>
  formattable()
```

## Describing Properties of our Data (refined)

Skewness tells us the asymmetry in the dataset. FTHG (Full Time Home Goals) has a skewness of 1.04. This tells us that it is positively right skewed and the value being greater than 1 means the skewness is more pronounced and outliers or extreme values might exist in the high end. This is true since Home teams have a higher chance of scoring more goals than an away team.

Similarly, we can see AS ( Away Shots ) has a skewness of 0.56 which is moderate. It is not extremely skewed like FTHG data.

```{r}

#Describing the skewness for home/away goals and shots taken for both teams
library(dlookr)
soccer |>
  select(FTHG, FTAG, HS, AS) |>
  describe() |>
  select(described_variables, skewness) |>
  formattable()
```

## Testing Normality (Accelerated)

### Q-Q Plot

Q-Q plot provides us a comparison between observed data and expected values of the theoretical distribution. If the data points follows the straight line, it is approximately distributed as per the theoretical distribution.

If there is a deviation as seen in the Q-Q plot of 'AS' and 'HS' variable, it moves slightly upwards away from the line. This means that the data has higher tails. If there is a significant deviation then it means the data has outliers.

```{r qqPlots}

#qqplots
soccer |>
plot_normality(FTHG, FTAG, HS, AS)
```

## Normality within groups

```{r normality-group}

soccer %>%
  group_by(FTR) %>%
  select(FTHG,FTAG) %>%
  plot_normality()
```

## Square-root, Cube-root, and Logarithmic Transformations

I have selected FTHG (Full Time Home Goals) as the variable to perform these transformations on. The variable is crucial to understand the outcome of the soccer match.

```{r transforming}

homeGoals <- soccer |>
  filter(FTHG > 0)
```

## Square root Transformation

The square root of every data point in the data is taken. This method helps in reducing skewness and adds stability to the variance. We can see that the data after transformation is a lot more linear than the original data.

```{r}

sqrtGoals <- transform(homeGoals$FTHG, method = "sqrt") 

summary(sqrtGoals)
```

The transformed data has lower skewness and standard deviation. The transformed data has density peak of 1.5 with value ranging from 1.0 - 2.5 whereas the original data's peak is at 0.5 with value ranging between 0-6.

```{r sqrt-plot}

sqrtGoals |>
  plot()
```

## Logarithmic (+1) Transformation

This method involves taking the log of each data point and adding a value of 1 to each data point.

```{r log+1}

Log1Goals <- transform(homeGoals$FTHG, method = "log+1") 

summary(Log1Goals)
```

The transformed data produces a lower skewness than square root transformation and similar standard deviation. The plotted graph indicates a gradual drop in the original data but with the transformed data there is a sudden drop followed by a rise and then a gradual drop.

```{r}

Log1Goals |>
  plot()
```

## Inverse Transformation

In this method, the inverse of each data point is taken. Inverse transformation is less used compared to other methods because it is not suitable for data points that are zero or close to zero and it may not be interpretable. It does not work well with the chosen dataset variable as a lot of the values are close to 0 or 1.

```{r inverseT}

InvGoals <- transform(homeGoals$FTHG, method = "1/x") 

summary(InvGoals)
```

We can observe there is significant change to the transformed data. The skewness has decreased and so has standard deviation and standard error mean. In this plot, value ranges from 0.25 to 1 and has a density peak above 1.5.

```{r}

InvGoals |>
  plot()
```

## Squared Transformation

In squared transformation, each data point is replaced by its square. This is often done to scale the dataset.

```{r squaredTransform}

SqrdGoals <- transform(homeGoals$FTHG, method = "x^2") 

summary(SqrdGoals)
```

The transformation produces double the skewness and and an even bigger standard deviation. In the plot with transformed data, value on x ranges from 0 to 50 and density on y is from 0 to 01.25. There is a sudden drop in value in this plot unlike a gradual drop in the original data.

```{r squaredPlot}

SqrdGoals |>
  plot()
```

## Cubed Transformation

In squared transformation, each data point is replaced by its cube.

```{r cubedTransform}

CubeGoals <- transform(homeGoals$FTHG, method = "x^3") 

summary(CubeGoals)
```

The standard deviation of the transformed data in this case is almost 40 times of the original data. With skewness double of the original data. In the plot of the transformed data, we can see that there is a sharp drop. The range of value is 0 to 300 in, density is from 0 to 0.04.

```{r cubePlot}

CubeGoals |>
  plot()
```

## Box-Cox Transformation

This transformation technique is used to reduce variance and make data closely resemble a normal distribution.

```{r box-coxTransform}

BoxCoxGoals <- transform(homeGoals$FTHG, method = "Box-Cox") 

summary(BoxCoxGoals)
```

```{r}

BoxCoxGoals |>
  plot()
```
